# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_HBsp9o9RPOh-b7f_2Tb93y-M6i7c-w
"""

import streamlit as st
import pandas as pd
import numpy as np
import glob
from joblib import load

# 1) Otomatik tüm modelleri yükle
model_paths = glob.glob('models/*.pkl')
models = {p.split('/')[-1][:-4]: load(p) for p in model_paths}

# 2) Soru havuzunu tanımla (95 soru)
QUESTION_POOL = ['Q2','Q4','Q8','Q9','Q13','Q14','Q16','Q18','Q19','Q20','Q21','Q25','Q26','Q28','Q29',
    'Q33','Q34','Q35','Q40','Q44','Q45','Q47','Q51','Q52','Q53','Q54','Q60','Q62','Q67',
    'Q71','Q77','Q81','Q82','Q86','Q89','Q93','Q95','Q96','Q105','Q108','Q115','Q116',
    'Q117','Q119','Q125','Q126','Q127','Q128','Q129','Q130','Q133','Q138','Q139','Q140',
    'Q144','Q151','Q158','Q159','Q163','Q166','Q174','Q179','Q184','Q185','Q187','Q192',
    'Q197','Q202','Q203','Q204','Q205','Q210','Q212','Q215','Q219','Q221','Q222','Q224',
    'Q226','Q227','Q229','Q230','Q231','Q232','Q233','Q234','Q235','Q236','Q239','Q241',
    'Q242','Q243','Q249','Q252','Q253']


# 3) Meta veriler
perf     = pd.read_excel("model_performance.xlsx")
sel_feat = pd.read_excel("selected_features.xlsx")
cfg = sel_feat.merge(perf, on="Model").set_index("Model")

# 4) UI
st.title("Gelişimsel Tarama Testi")
st.write("Her soruya Evet/Hayır ile yanıt verin:")

answers = {}
for q in QUESTION_POOL:
    answers[q] = (st.radio(q, ["Evet","Hayır"])=="Evet")

if st.button("Tahmin Et"):
    # 5) Her modelden tahmin al ve ağırlığını hazırla
    preds, wts = {}, {}
    for name, clf in models.items():
        feats = [f.strip() for f in cfg.loc[name,"Selected_Questions"].split(',')]
        X = np.array([[answers[f] for f in feats]], dtype=int)
        preds[name] = clf.predict(X)[0]
        wts[name]   = (cfg.loc[name,"Train_F1"] + cfg.loc[name,"Test_F1"])/2

    # 6) Etiket başına ağırlıklı oylama
    results = {}
    for label in set(name.split('_',2)[2] for name in models):
        ms = [m for m in preds if m.endswith(label)]
        votes  = np.array([preds[m] for m in ms])
        weights= np.array([wts[m]    for m in ms])
        score  = (votes*weights).sum()/weights.sum()
        results[label] = score>=0.5

    # 7) Sonuçları göster
    st.subheader("Sonuçlar")
    for lbl,val in results.items():
        st.write(f"{lbl}: {'✅' if val else '❌'}")

    # 8) Açıklanabilirlik
    st.subheader("Yanlış Yapılan Sorular")
    for lbl,val in results.items():
        if val:
            pool=set()
            for m in models:
                if m.endswith(lbl):
                    pool |= set(cfg.loc[m,"Selected_Questions"].split(','))
            wrongs=[q for q in pool if not answers[q.strip()]]
            st.write(f"**{lbl}**: {', '.join(wrongs) or 'Yok'}")