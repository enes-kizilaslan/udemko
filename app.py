# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_HBsp9o9RPOh-b7f_2Tb93y-M6i7c-w
"""

import streamlit as st
import pandas as pd
import numpy as np
from utils import load_models, load_feature_lists, load_model_performances, prepare_input_data, make_predictions

# Model listesi
MODEL_LIST = [
    'AdaBoost_7_Sosyal', 'LogisticRegression_7_Sosyal', 'RandomForest_7_Sosyal', 'XGBoost_7_Sosyal',
    'AdaBoost_7_Dil', 'LogisticRegression_7_Dil', 'RandomForest_7_Dil', 'XGBoost_7_Dil',
    'AdaBoost_7_Motor', 'LogisticRegression_7_Motor', 'RandomForest_7_Motor', 'XGBoost_7_Motor',
    'AdaBoost_7_OSB', 'LogisticRegression_7_OSB', 'RandomForest_7_OSB', 'XGBoost_7_OSB',
    'AdaBoost_7_DEHB', 'LogisticRegression_7_DEHB', 'RandomForest_7_DEHB', 'XGBoost_7_DEHB',
    'AdaBoost_7_Ozgul', 'LogisticRegression_7_Ozgul', 'RandomForest_7_Ozgul', 'XGBoost_7_Ozgul',
    'AdaBoost_7_Zihinsel', 'LogisticRegression_7_Zihinsel', 'RandomForest_7_Zihinsel', 'XGBoost_7_Zihinsel'
]

# Dosya yolları
MODEL_ZIP_PATH = "models.zip"
FEATURE_FILE = "selected_features.xlsx"
PERFORMANCE_FILE = "model_performance.xlsx"

# Sayfa yapılandırması
st.set_page_config(
    page_title="Nörogelişimsel Bozukluk Tarama Sistemi",
    page_icon="🧠",
    layout="wide"
)

# CSS stilleri
st.markdown("""
<style>
    .main {
        padding: 2rem;
    }
    .stButton > button {
        width: 100%;
        margin-top: 1rem;
    }
    .result-box {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .high-risk {
        background-color: rgba(255, 0, 0, 0.1);
        border: 1px solid red;
    }
    .medium-risk {
        background-color: rgba(255, 165, 0, 0.1);
        border: 1px solid orange;
    }
    .low-risk {
        background-color: rgba(0, 255, 0, 0.1);
        border: 1px solid green;
    }
</style>
""", unsafe_allow_html=True)

def main():
    st.title("🧠 Nörogelişimsel Bozukluk Tarama Sistemi")
    
    try:
        # Modelleri ve gerekli dosyaları yükle
        models = load_models(MODEL_ZIP_PATH)
        feature_lists = load_feature_lists(FEATURE_FILE)
        performances = load_model_performances(PERFORMANCE_FILE)
        
        # Kullanıcı girişi için form oluştur
        with st.form("user_form"):
            user_answers = {}
            
            # Her kategori için soruları göster
            for category, features in feature_lists.items():
                if category != 'all_features':  # all_features kategorisini atla
                    st.subheader(f"{category} Kategorisi")
                    for feature in features:
                        user_answers[feature] = st.radio(
                            feature,
                            options=[0, 1],
                            format_func=lambda x: "Evet" if x == 1 else "Hayır"
                        )
            
            submit_button = st.form_submit_button("Tahmin Yap")
            
            if submit_button:
                # Verileri hazırla ve tahmin yap
                input_data = prepare_input_data(user_answers, feature_lists)
                results = make_predictions(models, input_data, performances)
                
                # Sonuçları göster
                st.header("Sonuçlar")
                for category, result in results.items():
                    prob = result['probability'] * 100
                    prediction = "Pozitif" if result['prediction'] == 1 else "Negatif"
                    
                    # Risk seviyesine göre stil belirleme
                    if prob >= 70:
                        box_class = "high-risk"
                    elif prob >= 30:
                        box_class = "medium-risk"
                    else:
                        box_class = "low-risk"
                    
                    # Sonuçları özel stil ile göster
                    st.markdown(f"""
                    <div class="result-box {box_class}">
                        <h3>{category}</h3>
                        <p>Tahmin: {prediction}</p>
                        <p>Olasılık: {prob:.2f}%</p>
                    </div>
                    """, unsafe_allow_html=True)
                
    except Exception as e:
        st.error(f"Bir hata oluştu: {str(e)}")
        st.error("Lütfen tüm gerekli dosyaların (models.zip, selected_features.xlsx, model_performance.xlsx) mevcut olduğundan emin olun.")

if __name__ == "__main__":
    main()