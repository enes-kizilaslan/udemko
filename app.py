# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_HBsp9o9RPOh-b7f_2Tb93y-M6i7c-w
"""

import streamlit as st
from utils import load_models, load_feature_lists, load_model_performances, prepare_input_data, make_predictions
import pandas as pd

# Sayfa yapılandırması
st.set_page_config(
    page_title="Nörogelişimsel Bozukluk Tahmin Sistemi",
    page_icon="🧠",
    layout="wide"
)

# CSS stilleri
st.markdown("""
<style>
    .risk-box {
        padding: 20px;
        border-radius: 10px;
        margin: 10px 0;
        text-align: center;
    }
    .high-risk {
        background-color: rgba(255, 0, 0, 0.1);
        border: 2px solid red;
    }
    .medium-risk {
        background-color: rgba(255, 165, 0, 0.1);
        border: 2px solid orange;
    }
    .low-risk {
        background-color: rgba(0, 255, 0, 0.1);
        border: 2px solid green;
    }
</style>
""", unsafe_allow_html=True)

def main():
    st.title("Nörogelişimsel Bozukluk Tahmin Sistemi")
    
    try:
        # Modelleri, özellikleri ve performans metriklerini yükle
        models = load_models()
        feature_lists = load_feature_lists()
        model_performances = load_model_performances()
        
        # Form oluştur
        with st.form("prediction_form"):
            st.subheader("Lütfen aşağıdaki soruları cevaplayınız:")
            
            # Her kategori için ayrı başlık ve sorular
            answers = {}
            for category, features in feature_lists.items():
                if category != "all_features":  # all_features kategorisini atla
                    st.write(f"### {category} ile ilgili sorular")
                    for feature in features:
                        answers[feature] = st.radio(
                            feature,
                            options=["Evet", "Hayır"],
                            key=feature
                        )
            
            submit_button = st.form_submit_button("Tahmin Yap")
        
        if submit_button:
            # Kullanıcı cevaplarını hazırla
            input_data = prepare_input_data(answers)
            
            # Tahminleri yap
            predictions = make_predictions(models, input_data, model_performances)
            
            st.subheader("Tahmin Sonuçları:")
            
            # Sonuçları risk seviyelerine göre sınıflandır ve göster
            for condition, prob in predictions.items():
                prob_percentage = prob * 100
                if prob_percentage >= 70:
                    risk_class = "high-risk"
                    risk_level = "Yüksek"
                elif prob_percentage >= 40:
                    risk_class = "medium-risk"
                    risk_level = "Orta"
                else:
                    risk_class = "low-risk"
                    risk_level = "Düşük"
                
                st.markdown(
                    f"""
                    <div class="risk-box {risk_class}">
                        <h4>{condition}</h4>
                        <p>Risk Seviyesi: {risk_level}</p>
                        <p>Risk Oranı: {prob_percentage:.1f}%</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
    
    except Exception as e:
        st.error(f"Bir hata oluştu: {str(e)}")
        st.error("Lütfen tüm gerekli dosyaların mevcut olduğundan emin olun (models.zip, selected_features.xlsx, model_performance.xlsx)")

if __name__ == "__main__":
    main()